<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
      
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
  <head>
    <title>Some JavaScript SVG Examples</title>

    <object id="AdobeSVG" width="1" height="1" classid="clsid:78156a80-c6a1-4bbf-8e6a-3cd390eeb4e2"></object>
    <?import namespace="svg" implementation="#AdobeSVG"?>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <link href="simple.css" rel="stylesheet" type="text/css"></link>
    <link href="interpreter/interpreter.css" rel="stylesheet" type="text/css"></link>

    <script type="text/javascript" src="../MochiKit/MochiKit.js"></script>
    <script type="text/javascript" src="interpreter/interpreter.js"></script>
    <script type="text/javascript" src="../SVGKit/SVGKit.js" ></script>
    <script type="text/javascript" src="../SVGKit/SVGCanvas.js"></script>

    <script type="text/javascript">
      function testRect() {
          var svg = new SVGKit('plot1o');
          var newRect = svg.RECT({'x':10, 'y':10, 'width':80, 'height':80, 'fill':'blue', 'fill-opacity':.5});
          svg.append(newRect);
          svg.append( svg.CIRCLE( {'cx':50, 'cy':50, 'r':20, 'fill':'purple', 'fill-opacity':.3} ) );
      }

      function testCreate() {
          var svg = new SVGKit(100, 100);
          appendChildNodes(getElement('svgdiv'), svg.htmlElement);
          var init = function () {
              log("htmlElemnt = " + svg.htmlElement);
              log("svgDocument = " + svg.svgDocument);
              log("svgElement = " + svg.svgElement);
              var newRect = svg.RECT( {'x':'10', 'y':'10', 'width':'80', 'height':'80', 'fill':'blue'} );
              svg.append(newRect);
              svg.append( svg.CIRCLE( {'cx':50, 'cy':50, 'r':20, 'fill':'red'} ) ); 
          }
          svg.whenReady(init);
      }
      function testCanvas() {
          var svg = new SVGKit(200, 200);
          log("1st svg = " + svg);
          appendChildNodes(getElement('svgdiv'), svg.htmlElement);
          var init = function () {
              log("2nd svg = " + svg);
              ctx = new SVGCanvas(svg);
              ctx.fillStyle = "#5F005F";
              ctx.fillRect(20, 20, 40, 40);
          }
          svg.whenReady(init);
      }
      function testBowTie() {
          // http://developer.mozilla.org/en/docs/Drawing_Graphics_with_Canvas
          var svg = new SVGKit(200, 200);
          appendChildNodes(getElement('svgdiv'), svg.htmlElement);
          var init = function () {
              draw(svg);
              appendChildNodes($('codediv'), PRE(null,svg.toXML()));
          }
          svg.whenReady(init);
      }

      function drawBowtie(ctx, fillStyle) {
       
         ctx.fillStyle = "rgba(200,200,200,0.3)";
         ctx.fillRect(-30, -30, 60, 60);
       
         ctx.fillStyle = fillStyle;
         ctx.globalAlpha = 1.0;
         ctx.beginPath();
         ctx.moveTo(25, 25);
         ctx.lineTo(-25, -25);
         ctx.lineTo(25, -25);
         ctx.lineTo(-25, 25);
         ctx.closePath();
         ctx.fill();
       }
       
       function dot(ctx) {
         ctx.save();
         ctx.fillStyle = "black";
         ctx.fillRect(-2, -2, 4, 4);
         ctx.restore();
       }
       
       function draw(svg) {
         //var canvas = document.getElementById("canvas");
         //var ctx = canvas.getContext("2d");
         var ctx = new SVGCanvas(svg);

         // note that all other translates are relative to this
         // one
         ctx.translate(45, 45);

         ctx.save();
         //ctx.translate(0, 0); // unnecessary
         drawBowtie(ctx, "red");
         dot(ctx);
         ctx.restore();
       
         ctx.save();
         ctx.translate(85, 0);
         ctx.rotate(45 * Math.PI / 180);
         drawBowtie(ctx, "green");
         dot(ctx);
         ctx.restore();
       
         ctx.save();
         ctx.translate(0, 85);
         ctx.rotate(135 * Math.PI / 180);
         drawBowtie(ctx, "blue");
         dot(ctx);
         ctx.restore();
       
         ctx.save();
         ctx.translate(85, 85);
         ctx.rotate(90 * Math.PI / 180);
         drawBowtie(ctx, "yellow");
         dot(ctx);
         ctx.restore();
       }

       function testBoxes() {
          // http://developer.mozilla.org/en/docs/Drawing_Graphics_with_Canvas
          // http://developer.mozilla.org/en/docs/Canvas_tutorial:Drawing_shapes
          var init = function () {
              var ctx = new SVGCanvas(svg);
              ctx.strokeRect(0,0,200-1,200-1);
              ctx.fillRect(25,25,100,100);
              ctx.clearRect(45,45,60,60);
              ctx.strokeRect(50,50,50,50);
              //appendChildNodes($('codediv'), PRE(null,svg.xmlSource()));
          } 
          var svg = new SVGKit(200, 200);
          addToCallStack(svg.htmlElement, 'onload', init);
          appendChildNodes(getElement('svgdiv'), svg.htmlElement);
      }

      addLoadEvent(testRect);
      addLoadEvent(testCreate);
      addLoadEvent(testCanvas);
      addLoadEvent(testBoxes);
      addLoadEvent(testBowTie);
    </script>
    
  </head>
  <body>


<div>

<!--
<embed  id="p1e" src="example.svg" width="150" height="150"
        type="image/svg+xml"
        pluginspage="http://www.adobe.com/svg/viewer/install/"></embed>
-->

<object id="plot1o" data="example.svg" width="150" height="150" type="image/svg+xml">
    You can't display SVG.
</object>

</div>


<div id="svgdiv"></div>
<div id="codediv"></div>

<!--
<form id="inputform" action="javascript:void(0);">
    <div>
        <input id ="Troof" name="Troof" type="text" value="100" size="20" />
        <input type="button" value="Roof Percent" name="B1" 
            onclick="gg1.translateRoof(document.getElementById('Troof').value)" />
        <br />
        <input id ="Ttele" name="Ttele" type="text" value="0" size="20" />
        <input type="button" value="Telescope " name="B2" 
            onclick="gg1.rotateTelescope(document.getElementById('Ttele').value)" />
    </div>
</form>
-->

<svg id="inline" xmlns="http://www.w3.org/2000/svg" width="100" height="100">
    <rect x="10" y="10" width="80" height="80" style="fill:blue; stroke:black;" />
</svg>


<form id="interpreter_form" action="javascript:void(0);">
    <div>
    <div id="interpreter_area">
        <div id="interpreter_output"></div>
    </div>
    <input id="interpreter_text" name="input_text" type="text" class="textbox" size="100" />
    </div>
</form>
<div>
    Notes:
    <ul>
        <li>
            To continue code on the next line, end it with
            <tt>//</tt>
        </li>
        <li>
            <tt>function name() {}</tt> syntax might not end up in
            window scope, so use <tt>name = function () {}</tt>
            syntax instead
        </li>
        <li>
            If you want to stuff something into the output window
            other than the <tt>repr(...)</tt> of the expression
            result, use the <tt>writeln(...)</tt> function.
            It accepts anything that MochiKit.DOM does, so you can
            even put styled stuff in there!
        </li>
        <li>
            Use <tt>clear()</tt> to clear the interpreter window.
        </li>
        <li>
            You can use <tt>blockOn(aDeferred)</tt> to wait on a
            Deferred.  This expression must be used by itself, so
            the value must be obtained from <tt>_</tt> or
            <tt>last_exc</tt>.  Typing any expression will
            cancel the Deferred.
        </li>
        <li>
            Up and down arrow keys work as a rudimentary history
        </li>
        <li>
            <tt>_</tt> is the value of the last expression
            that was not <tt>undefined</tt>, <tt>last_exc</tt> is
            the value of the last unhandled exception.
        </li>
    </ul>
</div>

</body>
</html>
