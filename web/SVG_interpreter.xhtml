<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" />
  <title>SVGKit Overview</title>
  <link type="text/css" rel="stylesheet" href="../tests/simple.css" />
  <link type="text/css" rel="stylesheet" href="../tests/interpreter/interpreter.css" />
</head>
<body>
<h1>Canvas, SVGKit, and SVGCanvas in the MochiKit Interpreter
</h1>
<p>While it may seem obvious, it's kind of fun to play with
drawing graphics using the interpreter. You can see what different
things do.</p>
<form action="javascript:void(0);" id="interpreter_form">
  <div>
  <div id="interpreter_area">
  <div id="interpreter_output"><span class="banner">MochiKit
v1.3.1 [Gecko/20060508 Firefox/1.5.0.4] <br />
Type your expression in the input box below and press return, or see
the notes below for more information. </span> <br />
  <span class="code">&gt;&gt;&gt; s =
SVGKit(100,100) </span> <br />
  <span class="data">[SVGKit 0.1]&nbsp;</span><span class="code"></span> <br />
  <span class="code">&gt;&gt;&gt;
s.svgDocument </span> <br />
  <span class="data">[object HTMLDocument] </span> <br />
  <span class="code">&gt;&gt;&gt; s.svgElement
  </span> <br />
  <span class="data">[object SVGSVGElement] </span>
  <br />
  <span class="code">&gt;&gt;&gt;
writeln(s.svgElement) </span> <br />
  <span class="data"> <svg height="100" width="100" version="1.1" xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" svg="http://www.w3.org/2000/svg"><circle fill-opacity="0.3" fill="purple" r="20" cy="50" cx="50"></circle></svg>
  </span><br />
  <span class="code">
&gt;&gt;&gt; circle = s.CIRCLE( {'cx':50, 'cy':50, 'r':20,
'fill':'purple', 'fill-opacity':.3} ) </span>
  <br />
  <span class="data">
[object SVGCircleElement] </span>
  <br />
  <span class="code">
&gt;&gt;&gt; s.append(circle) </span>
  <br />
  <span class="code">&gt;&gt;&gt;
writeln(s.toXML()) </span> <br />
  <span class="data">&lt;svg height="100"
version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3"
r="20"/&gt; &lt;/svg&gt; </span><br />
  </div>
  </div>
  <input size="100" class="textbox" name="input_text" id="interpreter_text" type="text" /> </div>
</form>
<div>
<div id="interpreter_area">
<div id="interpreter_output"><span class="banner">
MochiKit v1.3.1 [Gecko/20060508 Firefox/1.5.0.4] <br />
Type your expression in the input box below and press return, or see
the notes below for more information. </span>
<span class="code"></span><span class="data"></span>&nbsp;<br />
<span class="code">
&gt;&gt;&gt; s = SVGKit(100,100) </span>
<br />
<span class="data">
[SVGKit 0.1] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.document </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgDocument </span>
<br />
<span class="data">
[object HTMLDocument] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgElement </span>
<br />
<span class="data">
[object SVGSVGElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement) </span>
<br />
<span class="data">
<br />
<span class="code">
&gt;&gt;&gt; s.circle() </span>
<br />
<span class="code">
&gt;&gt;&gt; s.circle() </span>
<br />
<span class="code">
&gt;&gt;&gt; s.circle() </span>
<br />
<span class="code">
&gt;&gt;&gt; </span>
<br />
<span class="code">
&gt;&gt;&gt; </span>
<br />
<span class="code">
&gt;&gt;&gt; </span>
<br />
<span class="code">
&gt;&gt;&gt; s.circle() </span>
<br />
<span class="code">
&gt;&gt;&gt; s.toXML() </span>
<br />
<span class="data">
"&lt;svg height=\"100\" version=\"1.1\" width=\"100\"
xmlns=\"http://www.w3.org/2000/svg\"
xmlns:svg=\"http://www.w3.org/2000/svg\"
xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n&lt;circle
cx=\"50\" cy=\"50\" fill=\"purple\" fill-opacity=\"0.3\"
r=\"20\"/&gt;\n&lt;circle cx=\"50\" cy=\"50\" fill=\"purple\"
fill-opacity=\"0.3\" r=\"20\"/&gt;\n&lt;circle cx=\"50\"
cy=\"50\" fill=\"purple\" fill-opacity=\"0.3\"
r=\"20\"/&gt;\n&lt;circle cx=\"50\" cy=\"50\" fill=\"purple\"
fill-opacity=\"0.3\" r=\"20\"/&gt;\n&lt;/svg&gt;\n" </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3"
r="20"/&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3"
r="20"/&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3"
r="20"/&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3"
r="20"/&gt;
&lt;/svg&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; s.htmlElement </span>
<br />
<span class="data">
[object SVGSVGElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; circle = s.CIRCLE( {'cx':50, 'cy':50, 'r':20,
'fill':'purple', 'fill-opacity':.3} ) </span>
<br />
<span class="data">
[object SVGCircleElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.append(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; s.deleteContent() </span>
<br />
<span class="code">
&gt;&gt;&gt; s.append(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; hideElement(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; showElement(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs/&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3" r="20"
style="display: block;"/&gt;
&lt;/svg&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; hideElement(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs/&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3" r="20"
style="display: none;"/&gt;
&lt;/svg&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; computedStyle(circle,'font') </span>
<br />
<span class="data">
"" </span>
<br />
<span class="code">
&gt;&gt;&gt; computedStyle(circle,'fill') </span>
<br />
<span class="data">
"" </span>
<br />
<span class="code">
&gt;&gt;&gt; computedStyle(circle,'fill-opacity') </span>
<br />
<span class="data">
"" </span>
<br />
<span class="code">
&gt;&gt;&gt; elementDimensions(circle) </span>
<br />
<span class="data">
{w: undefined, h: undefined} </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox() </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
message </td>
      <td class="data">
Component returned failure code: 0x80004005 (NS_ERROR_FAILURE)
[nsIDOMSVGLocatable.getBBox] </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
NS_ERROR_FAILURE </td>
    </tr>
    <tr>
      <td class="error">
result </td>
      <td class="data">
2147500037 </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; showElement(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox() </span>
<br />
<span class="data">
[object SVGRect] </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox().w </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox().width </span>
<br />
<span class="data">
40 </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox().height </span>
<br />
<span class="data">
40 </span>
<br />
<span class="code">
&gt;&gt;&gt; setOpacity(circle,.1) </span>
<br />
<span class="code">
&gt;&gt;&gt; [circle.getBBox().width,
circle.getBBox().height] </span>
<br />
<span class="data">
[40, 40] </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox().x </span>
<br />
<span class="data">
30 </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getBBox().y </span>
<br />
<span class="data">
30 </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(circle.getBBox()) </span>
<br />
<span class="data">
["height", "width", "x", "y"] </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(circle) </span>
<br />
<span class="data">
["ATTRIBUTE_NODE", "CDATA_SECTION_NODE", "COMMENT_NODE",
"DOCUMENT_FRAGMENT_NODE", "DOCUMENT_NODE",
"DOCUMENT_POSITION_CONTAINED_BY", "DOCUMENT_POSITION_CONTAINS",
"DOCUMENT_POSITION_DISCONNECTED", "DOCUMENT_POSITION_FOLLOWING",
"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
"DOCUMENT_POSITION_PRECEDING", "DOCUMENT_TYPE_NODE", "ELEMENT_NODE",
"ENTITY_NODE", "ENTITY_REFERENCE_NODE", "NOTATION_NODE",
"PROCESSING_INSTRUCTION_NODE", "TEXT_NODE", "appendChild",
"attributes", "baseURI", "childNodes", "className", "cloneNode",
"compareDocumentPosition", "cx", "cy", "dispatchEvent",
"farthestViewportElement", "firstChild", "getAttribute",
"getAttributeNS", "getAttributeNode", "getAttributeNodeNS", "getBBox",
"getCTM", "getElementsByTagName", "getElementsByTagNameNS",
"getFeature", "getPresentationAttribute", "getScreenCTM",
"getTransformToElement", "getUserData", "hasAttribute",
"hasAttributeNS", "hasAttributes", "hasChildNodes", "id",
"insertBefore", "isDefaultNamespace", "isEqualNode", "isSameNode",
"isSupported", "lastChild", "localName", "lookupNamespaceURI",
"lookupPrefix", "namespaceURI", "nearestViewportElement",
"nextSibling", "nodeName", "nodeType", "nodeValue", "normalize",
"ownerDocument", "ownerSVGElement", "parentNode", "prefix",
"previousSibling", "r", "removeAttribute", "removeAttributeNS",
"removeAttributeNode", "removeChild", "removeEventListener",
"replaceChild", "setAttribute", "setAttributeNS", "setAttributeNode",
"setAttributeNodeNS", "setUserData", "style", "tagName", "textContent",
"transform", "viewportElement"] </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.farthestViewportElement() </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
message </td>
      <td class="data">
Component returned failure code: 0x80004001 (NS_ERROR_NOT_IMPLEMENTED)
[nsIDOMSVGLocatable.farthestViewportElement] </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
NS_ERROR_NOT_IMPLEMENTED </td>
    </tr>
    <tr>
      <td class="error">
result </td>
      <td class="data">
2147500033 </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; circle.farthestViewportElement </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
message </td>
      <td class="data">
Component returned failure code: 0x80004001 (NS_ERROR_NOT_IMPLEMENTED)
[nsIDOMSVGLocatable.farthestViewportElement] </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
NS_ERROR_NOT_IMPLEMENTED </td>
    </tr>
    <tr>
      <td class="error">
result </td>
      <td class="data">
2147500033 </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; circle.getCTM </span>
<br />
<span class="data">
function getCTM() {
[native code]
} </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.getCTM() </span>
<br />
<span class="data">
[object SVGMatrix] </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(circle.getCTM()) </span>
<br />
<span class="data">
["a", "b", "c", "d", "e", "f", "flipX", "flipY", "inverse", "multiply",
"rotate", "rotateFromVector", "scale", "scaleNonUniform", "skewX",
"skewY", "translate"] </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.normalize </span>
<br />
<span class="data">
function normalize() {
[native code]
} </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.normalize() </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs/&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3" r="20"
style="display: block; opacity: 0.1;"/&gt;
&lt;/svg&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; setOpacity(circle,1) </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.baseURI </span>
<br />
<span class="data">
"file:///D:/Documents/svgkit/tests/svg_tests.xhtml" </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.id </span>
<br />
<span class="data">
"" </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.textContent </span>
<br />
<span class="data">
"" </span>
<br />
<span class="code">
&gt;&gt;&gt; circle.transform </span>
<br />
<span class="data">
[object SVGAnimatedTransformList] </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(circle.transform) </span>
<br />
<span class="data">
["animVal", "baseVal"] </span>
<br />
<span class="code">
&gt;&gt;&gt; cir(circle.viewportElement) </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
fileName </td>
      <td class="data">
file:///D:/Documents/svgkit/tests/interpreter/interpreter.js </td>
    </tr>
    <tr>
      <td class="error">
lineNumber </td>
      <td class="data">
185 </td>
    </tr>
    <tr>
      <td class="error">
message </td>
      <td class="data">
cir is not defined </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
ReferenceError </td>
    </tr>
    <tr>
      <td class="error">
stack </td>
      <td class="data">
("cir(circle.viewportElement)")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("cir(circle.viewportElement)")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("cir(circle.viewportElement)")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:242
apply([object Object],[object Object])@:0
("cir(circle.viewportElement)")@file:///D:/Documents/svgkit/MochiKit/Base.js:499
()@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:235
apply([object Object],[object Object])@:0
()@file:///D:/Documents/svgkit/MochiKit/Base.js:499
([object
Event])@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:59
apply([object Object],[object Object])@:0
([object Event])@file:///D:/Documents/svgkit/MochiKit/Base.js:499
@:0
      </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; circle.viewportElement </span>
<br />
<span class="data">
[object SVGSVGElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgElement==circle.viewportElement </span>
<br />
<span class="data">
true </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(s) </span>
<br />
<span class="data">
["$", "A", "ALTGLYPH", "ALTGLYPHDEF", "ALTGLYPHITEM", "ANIMATE",
"ANIMATECOLOR", "ANIMATEMOTION", "ANIMATETRANSFORM", "CIRCLE",
"CLIPPATH", "COLOR_PROFILE", "CURSOR", "DEFINITION_SRC", "DEFS",
"DESC", "ELLIPSE", "FEBLEND", "FECOLORMATRIX", "FECOMPONENTTRANSFER",
"FECOMPOSITE", "FECONVOLVEMATRIX", "FEDIFFUSELIGHTING",
"FEDISPLACEMENTMAP", "FEDISTANTLIGHT", "FEFLOOD", "FEFUNCA", "FEFUNCB",
"FEFUNCG", "FEFUNCR", "FEGAUSSIANBLUR", "FEIMAGE", "FEMERGE",
"FEMERGENODE", "FEMORPHOLOGY", "FEOFFSET", "FEPOINTLIGHT",
"FESPECULARLIGHTING", "FESPOTLIGHT", "FETILE", "FETURBULENCE",
"FILTER", "FONT", "FONT_FACE", "FONT_FACE_FORMAT", "FONT_FACE_NAME",
"FONT_FACE_SRC", "FONT_FACE_URI", "FOREIGNOBJECT", "G", "GLYPH",
"GLYPHREF", "HKERN", "IMAGE", "LINE", "LINEARGRADIENT", "MARKER",
"MASK", "METADATA", "MISSING_GLYPH", "MPATH", "PATH", "PATTERN",
"POLYGON", "POLYLINE", "RADIALGRADIENT", "RECT", "SCRIPT", "SET",
"STOP", "STYLE", "SVG", "SWITCH", "SYMBOL", "TEXT", "TEXTPATH",
"TITLE", "TREF", "TSPAN", "USE", "VIEW", "VKERN", "__init__",
"__repr__", "_addDOMFunctions", "_oneParameter", "_redrawId",
"_twoParameter", "append", "circle", "createInlineSVG", "createSVG",
"createSVGDOM", "createSVGDOMFunc", "createUniqueID", "deleteContent",
"emitXML", "getDefs", "grabSVG", "htmlElement", "isIE", "loadSVG",
"resize", "resizeHTMLElement", "resizeSVGElement", "rotate", "scale",
"setBaseURI", "setSize", "suspendRedraw", "svgDocument", "svgElement",
"toString", "toXML", "translate", "uniqueIdCount", "unsuspendRedraw",
"whenReady"] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.isIE() </span>
<br />
<span class="data">
null </span>
<br />
<span class="code">
&gt;&gt;&gt; help(s.rotate) </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
fileName </td>
      <td class="data">
file:///D:/Documents/svgkit/tests/interpreter/interpreter.js </td>
    </tr>
    <tr>
      <td class="error">
lineNumber </td>
      <td class="data">
185 </td>
    </tr>
    <tr>
      <td class="error">
message </td>
      <td class="data">
help is not defined </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
ReferenceError </td>
    </tr>
    <tr>
      <td class="error">
stack </td>
      <td class="data">
("help(s.rotate)")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("help(s.rotate)")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("help(s.rotate)")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:242
apply([object Object],[object Object])@:0
("help(s.rotate)")@file:///D:/Documents/svgkit/MochiKit/Base.js:499
()@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:235
apply([object Object],[object Object])@:0
()@file:///D:/Documents/svgkit/MochiKit/Base.js:499
([object
Event])@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:59
apply([object Object],[object Object])@:0
([object Event])@file:///D:/Documents/svgkit/MochiKit/Base.js:499
@:0
      </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; dir(s.svgDocument) </span>
<br />
<span class="data">
["ATTRIBUTE_NODE", "CDATA_SECTION_NODE", "COMMENT_NODE",
"DOCUMENT_FRAGMENT_NODE", "DOCUMENT_NODE",
"DOCUMENT_POSITION_CONTAINED_BY", "DOCUMENT_POSITION_CONTAINS",
"DOCUMENT_POSITION_DISCONNECTED", "DOCUMENT_POSITION_FOLLOWING",
"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
"DOCUMENT_POSITION_PRECEDING", "DOCUMENT_TYPE_NODE", "ELEMENT_NODE",
"ENTITY_NODE", "ENTITY_REFERENCE_NODE", "NOTATION_NODE",
"PROCESSING_INSTRUCTION_NODE", "TEXT_NODE", "URL", "addBinding",
"adoptNode", "alinkColor", "anchors", "appendChild", "applets",
"attributes", "baseURI", "bgColor", "body", "captureEvents",
"characterSet", "childNodes", "clear", "cloneNode", "close",
"compareDocumentPosition", "compatMode", "contentType", "cookie",
"createAttribute", "createAttributeNS", "createCDATASection",
"createComment", "createDocumentFragment", "createElement",
"createElementNS", "createEntityReference", "createEvent",
"createExpression", "createNSResolver", "createNodeIterator",
"createProcessingInstruction", "createRange", "createTextNode",
"createTreeWalker", "defaultView", "designMode", "dir",
"dispatchEvent", "doctype", "documentElement", "documentURI",
"domConfig", "domain", "embeds", "evaluate", "execCommand",
"execCommandShowHelp", "fgColor", "firstChild", "forms",
"getAnonymousElementByAttribute", "getAnonymousNodes",
"getBindingParent", "getBoxObjectFor", "getElementById",
"getElementsByName", "getElementsByTagName", "getElementsByTagNameNS",
"getFeature", "getSelection", "getUserData", "hasAttributes",
"hasChildNodes", "height", "images", "implementation", "importNode",
"inputEncoding", "insertBefore", "isDefaultNamespace", "isEqualNode",
"isSameNode", "isSupported", "lastChild", "lastModified", "linkColor",
"links", "loadBindingDocument", "localName", "location",
"lookupNamespaceURI", "lookupPrefix", "namespaceURI", "nextSibling",
"nodeName", "nodeType", "nodeValue", "normalize", "normalizeDocument",
"ownerDocument", "parentNode", "plugins", "preferredStylesheetSet",
"prefix", "previousSibling", "queryCommandEnabled",
"queryCommandIndeterm", "queryCommandState", "queryCommandSupported",
"queryCommandText", "queryCommandValue", "referrer", "releaseEvents",
"removeBinding", "removeChild", "removeEventListener", "renameNode",
"replaceChild", "routeEvent", "setBoxObjectFor", "setUserData",
"strictErrorChecking", "styleSheets", "svg", "textContent", "title",
"vlinkColor", "width", "write", "writeln", "xmlEncoding",
"xmlStandalone", "xmlVersion"] </span>
<br />
<span class="code">
&gt;&gt;&gt; document.xmlEncoding </span>
<br />
<span class="data">
"UTF-8" </span>
<br />
<span class="code">
&gt;&gt;&gt; document.xmlStandalone </span>
<br />
<span class="data">
false </span>
<br />
<span class="code">
&gt;&gt;&gt; document.xmlVersion </span>
<br />
<span class="data">
"1.0" </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(s.svgElement) </span>
<br />
<span class="data">
["ATTRIBUTE_NODE", "CDATA_SECTION_NODE", "COMMENT_NODE",
"DOCUMENT_FRAGMENT_NODE", "DOCUMENT_NODE",
"DOCUMENT_POSITION_CONTAINED_BY", "DOCUMENT_POSITION_CONTAINS",
"DOCUMENT_POSITION_DISCONNECTED", "DOCUMENT_POSITION_FOLLOWING",
"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
"DOCUMENT_POSITION_PRECEDING", "DOCUMENT_TYPE_NODE", "ELEMENT_NODE",
"ENTITY_NODE", "ENTITY_REFERENCE_NODE", "NOTATION_NODE",
"PROCESSING_INSTRUCTION_NODE", "SVG_ZOOMANDPAN_DISABLE",
"SVG_ZOOMANDPAN_MAGNIFY", "SVG_ZOOMANDPAN_UNKNOWN", "TEXT_NODE",
"animationsPaused", "appendChild", "attributes", "baseURI",
"checkEnclosure", "checkIntersection", "childNodes", "className",
"cloneNode", "compareDocumentPosition", "contentScriptType",
"contentStyleType", "createSVGAngle", "createSVGLength",
"createSVGMatrix", "createSVGNumber", "createSVGPoint",
"createSVGRect", "createSVGString", "createSVGTransform",
"createSVGTransformFromMatrix", "currentScale", "currentTranslate",
"currentView", "deSelectAll", "dispatchEvent",
"farthestViewportElement", "firstChild", "forceRedraw", "getAttribute",
"getAttributeNS", "getAttributeNode", "getAttributeNodeNS", "getBBox",
"getCTM", "getCurrentTime", "getElementById", "getElementsByTagName",
"getElementsByTagNameNS", "getEnclosureList", "getFeature",
"getIntersectionList", "getPresentationAttribute", "getScreenCTM",
"getTransformToElement", "getUserData",
"getViewboxToViewportTransform", "hasAttribute", "hasAttributeNS",
"hasAttributes", "hasChildNodes", "height", "id", "insertBefore",
"isDefaultNamespace", "isEqualNode", "isSameNode", "isSupported",
"lastChild", "localName", "lookupNamespaceURI", "lookupPrefix",
"namespaceURI", "nearestViewportElement", "nextSibling", "nodeName",
"nodeType", "nodeValue", "normalize", "ownerDocument",
"ownerSVGElement", "parentNode", "pauseAnimations",
"pixelUnitToMillimeterX", "pixelUnitToMillimeterY", "prefix",
"preserveAspectRatio", "previousSibling", "removeAttribute",
"removeAttributeNS", "removeAttributeNode", "removeChild",
"removeEventListener", "replaceChild", "screenPixelToMillimeterX",
"screenPixelToMillimeterY", "setAttribute", "setAttributeNS",
"setAttributeNode", "setAttributeNodeNS", "setCurrentTime",
"setUserData", "style", "suspendRedraw", "tagName", "textContent",
"unpauseAnimations", "unsuspendRedraw", "unsuspendRedrawAll",
"useCurrentView", "viewBox", "viewport", "viewportElement", "width",
"x", "y", "zoomAndPan"] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgElement.firstChild </span>
<br />
<span class="data">
[object SVGDefsElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgElement.getEnclosureList() </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
message </td>
      <td class="data">
Not enough arguments [nsIDOMSVGSVGElement.getEnclosureList] </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
NS_ERROR_XPC_NOT_ENOUGH_ARGS </td>
    </tr>
    <tr>
      <td class="error">
result </td>
      <td class="data">
2153185281 </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; s.svgElement.getEnclosureList(circle) </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
message </td>
      <td class="data">
Not enough arguments [nsIDOMSVGSVGElement.getEnclosureList] </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
NS_ERROR_XPC_NOT_ENOUGH_ARGS </td>
    </tr>
    <tr>
      <td class="error">
result </td>
      <td class="data">
2153185281 </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; s.svgElement.insertBefore(circle,
s.svgElement.firstChild) </span>
<br />
<span class="data">
[object SVGCircleElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3" r="20"
style="display: block; opacity: 1;"/&gt;
&lt;defs/&gt;
&lt;/svg&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; replaceChildNodes(s.svgElement) </span>
<br />
<span class="data">
[object SVGSVGElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"/&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; s.svgElement.firstChild </span>
<br />
<span class="data">
null </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgElement.insertBefore(circle,
s.svgElement.firstChild) </span>
<br />
<span class="data">
[object SVGCircleElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.toXML()) </span>
<br />
<span class="data">
&lt;svg height="100" version="1.1" width="100"
xmlns="http://www.w3.org/2000/svg"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;circle cx="50" cy="50" fill="purple" fill-opacity="0.3" r="20"
style="display: block; opacity: 1;"/&gt;
&lt;/svg&gt;
</span><br />
<span class="code">
&gt;&gt;&gt; s.svgElement.getTransformToElement(circle) </span>
<br />
<span class="data">
[object SVGMatrix] </span>
<br />
<span class="code">
&gt;&gt;&gt; m=_ </span>
<br />
<span class="data">
[object SVGMatrix] </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(m) </span>
<br />
<span class="data">
["a", "b", "c", "d", "e", "f", "flipX", "flipY", "inverse", "multiply",
"rotate", "rotateFromVector", "scale", "scaleNonUniform", "skewX",
"skewY", "translate"] </span>
<br />
<span class="code">
&gt;&gt;&gt; m.rotate </span>
<br />
<span class="data">
function rotate() {
[native code]
} </span>
<br />
<span class="code">
&gt;&gt;&gt; m.a </span>
<br />
<span class="data">
1 </span>
<br />
<span class="code">
&gt;&gt;&gt; m.b </span>
<br />
<span class="data">
0 </span>
<br />
<span class="code">
&gt;&gt;&gt; s.svgElement.ownerDocument </span>
<br />
<span class="data">
[object HTMLDocument] </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement) </span>
<br />
<span class="data">
<br />
<span class="code">
&gt;&gt;&gt; li = LI(null) </span>
<br />
<span class="data">
[object HTMLLIElement] </span>
<br />
<span class="code">
&gt;&gt;&gt; dir(li) </span>
<br />
<span class="data">
["ATTRIBUTE_NODE", "CDATA_SECTION_NODE", "COMMENT_NODE",
"DOCUMENT_FRAGMENT_NODE", "DOCUMENT_NODE",
"DOCUMENT_POSITION_CONTAINED_BY", "DOCUMENT_POSITION_CONTAINS",
"DOCUMENT_POSITION_DISCONNECTED", "DOCUMENT_POSITION_FOLLOWING",
"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
"DOCUMENT_POSITION_PRECEDING", "DOCUMENT_TYPE_NODE", "ELEMENT_NODE",
"ENTITY_NODE", "ENTITY_REFERENCE_NODE", "NOTATION_NODE",
"PROCESSING_INSTRUCTION_NODE", "TEXT_NODE", "appendChild",
"attributes", "baseURI", "blur", "childNodes", "className",
"clientHeight", "clientWidth", "cloneNode", "compareDocumentPosition",
"dir", "dispatchEvent", "firstChild", "focus", "getAttribute",
"getAttributeNS", "getAttributeNode", "getAttributeNodeNS",
"getElementsByTagName", "getElementsByTagNameNS", "getFeature",
"getUserData", "hasAttribute", "hasAttributeNS", "hasAttributes",
"hasChildNodes", "id", "innerHTML", "insertBefore",
"isDefaultNamespace", "isEqualNode", "isSameNode", "isSupported",
"lang", "lastChild", "localName", "lookupNamespaceURI", "lookupPrefix",
"namespaceURI", "nextSibling", "nodeName", "nodeType", "nodeValue",
"normalize", "offsetHeight", "offsetLeft", "offsetParent", "offsetTop",
"offsetWidth", "ownerDocument", "parentNode", "prefix",
"previousSibling", "removeAttribute", "removeAttributeNS",
"removeAttributeNode", "removeChild", "removeEventListener",
"replaceChild", "scrollHeight", "scrollLeft", "scrollTop",
"scrollWidth", "setAttribute", "setAttributeNS", "setAttributeNode",
"setAttributeNodeNS", "setUserData", "style", "tabIndex", "tagName",
"textContent", "title", "type", "value"] </span>
<br />
<span class="code">
&gt;&gt;&gt; li.toxml() </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
fileName </td>
      <td class="data">
file:///D:/Documents/svgkit/tests/interpreter/interpreter.js </td>
    </tr>
    <tr>
      <td class="error">
lineNumber </td>
      <td class="data">
185 </td>
    </tr>
    <tr>
      <td class="error">
message </td>
      <td class="data">
li.toxml is not a function </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
TypeError </td>
    </tr>
    <tr>
      <td class="error">
stack </td>
      <td class="data">
("li.toxml()")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("li.toxml()")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("li.toxml()")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:242
apply([object Object],[object Object])@:0
("li.toxml()")@file:///D:/Documents/svgkit/MochiKit/Base.js:499
()@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:235
apply([object Object],[object Object])@:0
()@file:///D:/Documents/svgkit/MochiKit/Base.js:499
([object
Event])@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:59
apply([object Object],[object Object])@:0
([object Event])@file:///D:/Documents/svgkit/MochiKit/Base.js:499
@:0
      </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; li.toXML() </span>
<br />
<span class="error">
Error: </span>
<table class="error">
  <thead class="invisible">
  <td colspan="2"></td>
  </thead><tfoot class="invisible">
  <td colspan="2"></td>
  </tfoot><tbody>
    <tr>
      <td class="error">
fileName </td>
      <td class="data">
file:///D:/Documents/svgkit/tests/interpreter/interpreter.js </td>
    </tr>
    <tr>
      <td class="error">
lineNumber </td>
      <td class="data">
185 </td>
    </tr>
    <tr>
      <td class="error">
message </td>
      <td class="data">
li.toXML is not a function </td>
    </tr>
    <tr>
      <td class="error">
name </td>
      <td class="data">
TypeError </td>
    </tr>
    <tr>
      <td class="error">
stack </td>
      <td class="data">
("li.toXML()")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("li.toXML()")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:185
("li.toXML()")@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:242
apply([object Object],[object Object])@:0
("li.toXML()")@file:///D:/Documents/svgkit/MochiKit/Base.js:499
()@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:235
apply([object Object],[object Object])@:0
()@file:///D:/Documents/svgkit/MochiKit/Base.js:499
([object
Event])@file:///D:/Documents/svgkit/tests/interpreter/interpreter.js:59
apply([object Object],[object Object])@:0
([object Event])@file:///D:/Documents/svgkit/MochiKit/Base.js:499
@:0
      </td>
    </tr>
  </tbody>
</table>
<span class="code">
&gt;&gt;&gt; dir(li) </span>
<br />
<span class="data">
["ATTRIBUTE_NODE", "CDATA_SECTION_NODE", "COMMENT_NODE",
"DOCUMENT_FRAGMENT_NODE", "DOCUMENT_NODE",
"DOCUMENT_POSITION_CONTAINED_BY", "DOCUMENT_POSITION_CONTAINS",
"DOCUMENT_POSITION_DISCONNECTED", "DOCUMENT_POSITION_FOLLOWING",
"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
"DOCUMENT_POSITION_PRECEDING", "DOCUMENT_TYPE_NODE", "ELEMENT_NODE",
"ENTITY_NODE", "ENTITY_REFERENCE_NODE", "NOTATION_NODE",
"PROCESSING_INSTRUCTION_NODE", "TEXT_NODE", "addEventListener",
"appendChild", "attributes", "baseURI", "blur", "childNodes",
"className", "clientHeight", "clientWidth", "cloneNode",
"compareDocumentPosition", "dir", "dispatchEvent", "firstChild",
"focus", "getAttribute", "getAttributeNS", "getAttributeNode",
"getAttributeNodeNS", "getElementsByTagName", "getElementsByTagNameNS",
"getFeature", "getUserData", "hasAttribute", "hasAttributeNS",
"hasAttributes", "hasChildNodes", "id", "innerHTML", "insertBefore",
"isDefaultNamespace", "isEqualNode", "isSameNode", "isSupported",
"lang", "lastChild", "localName", "lookupNamespaceURI", "lookupPrefix",
"namespaceURI", "nextSibling", "nodeName", "nodeType", "nodeValue",
"normalize", "offsetHeight", "offsetLeft", "offsetParent", "offsetTop",
"offsetWidth", "ownerDocument", "parentNode", "prefix",
"previousSibling", "removeAttribute", "removeAttributeNS",
"removeAttributeNode", "removeChild", "removeEventListener",
"replaceChild", "scrollHeight", "scrollLeft", "scrollTop",
"scrollWidth", "setAttribute", "setAttributeNS", "setAttributeNode",
"setAttributeNodeNS", "setUserData", "style", "tabIndex", "tagName",
"textContent", "title", "type", "value"] </span>
<br />
<span class="code">
&gt;&gt;&gt; li.textContent </span>
<br />
<span class="data">
"" </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement) </span>
<br />
<span class="data">
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement) </span>
<br />
<span class="data">
<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="100" height="100"><circle cx="50" cy="50" r="20" fill="purple" fill-opacity="0.3" style="display: none; opacity: 1;">
</circle></svg></span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement.cloneNode(true)) </span>
<br />
<span class="data">
<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="100" height="100"><circle cx="50" cy="50" r="20" fill="purple" fill-opacity="0.3" style="display: block; opacity: 1;">
</circle></svg></span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement.cloneNode(true)) </span>
<br />
<span class="data">
<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="100" height="100"><circle cx="50" cy="50" r="20" fill="purple" fill-opacity="0.3" style="display: block; opacity: 1;">
</circle></svg></span>
<br />
<span class="code">
&gt;&gt;&gt; hideElement(circle) </span>
<br />
<span class="code">
&gt;&gt;&gt; writeln(s.svgElement.cloneNode(true)) </span>
<br />
<span class="data">
<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="100" height="100"><circle cx="50" cy="50" r="20" fill="purple" fill-opacity="0.3" style="display: none; opacity: 1;">
</circle></svg></span>
<br />
</span></span></span></div>
</div>
<input id="interpreter_text" name="input_text" class="textbox" size="100" type="text" />
</div>
</body>
</html>
